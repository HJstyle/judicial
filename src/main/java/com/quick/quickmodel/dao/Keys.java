/*
 * This file is generated by jOOQ.
 */
package com.quick.quickmodel.dao;


import com.quick.quickmodel.dao.tables.Docs;
import com.quick.quickmodel.dao.tables.Knowledge;
import com.quick.quickmodel.dao.tables.Ob;
import com.quick.quickmodel.dao.tables.User;
import com.quick.quickmodel.dao.tables.records.DocsRecord;
import com.quick.quickmodel.dao.tables.records.KnowledgeRecord;
import com.quick.quickmodel.dao.tables.records.ObRecord;
import com.quick.quickmodel.dao.tables.records.UserRecord;

import javax.annotation.Generated;

import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>knowledgemap</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<DocsRecord, Integer> IDENTITY_DOCS = Identities0.IDENTITY_DOCS;
    public static final Identity<KnowledgeRecord, Integer> IDENTITY_KNOWLEDGE = Identities0.IDENTITY_KNOWLEDGE;
    public static final Identity<ObRecord, Integer> IDENTITY_OB = Identities0.IDENTITY_OB;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<DocsRecord> KEY_DOCS_PRIMARY = UniqueKeys0.KEY_DOCS_PRIMARY;
    public static final UniqueKey<KnowledgeRecord> KEY_KNOWLEDGE_PRIMARY = UniqueKeys0.KEY_KNOWLEDGE_PRIMARY;
    public static final UniqueKey<ObRecord> KEY_OB_PRIMARY = UniqueKeys0.KEY_OB_PRIMARY;
    public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = UniqueKeys0.KEY_USER_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<DocsRecord, Integer> IDENTITY_DOCS = Internal.createIdentity(Docs.DOCS, Docs.DOCS.ID);
        public static Identity<KnowledgeRecord, Integer> IDENTITY_KNOWLEDGE = Internal.createIdentity(Knowledge.KNOWLEDGE, Knowledge.KNOWLEDGE.ID);
        public static Identity<ObRecord, Integer> IDENTITY_OB = Internal.createIdentity(Ob.OB, Ob.OB.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<DocsRecord> KEY_DOCS_PRIMARY = Internal.createUniqueKey(Docs.DOCS, "KEY_docs_PRIMARY", Docs.DOCS.ID);
        public static final UniqueKey<KnowledgeRecord> KEY_KNOWLEDGE_PRIMARY = Internal.createUniqueKey(Knowledge.KNOWLEDGE, "KEY_knowledge_PRIMARY", Knowledge.KNOWLEDGE.ID);
        public static final UniqueKey<ObRecord> KEY_OB_PRIMARY = Internal.createUniqueKey(Ob.OB, "KEY_ob_PRIMARY", Ob.OB.ID);
        public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = Internal.createUniqueKey(User.USER, "KEY_user_PRIMARY", User.USER.USERNAME);
    }
}
