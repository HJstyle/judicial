/*
 * This file is generated by jOOQ.
 */
package com.quick.quickmodel.dao.tables;


import com.quick.quickmodel.dao.Indexes;
import com.quick.quickmodel.dao.Keys;
import com.quick.quickmodel.dao.Knowledgemap;
import com.quick.quickmodel.dao.tables.records.DocsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Docs extends TableImpl<DocsRecord> {

    private static final long serialVersionUID = 315517754;

    /**
     * The reference instance of <code>knowledgemap.docs</code>
     */
    public static final Docs DOCS = new Docs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocsRecord> getRecordType() {
        return DocsRecord.class;
    }

    /**
     * The column <code>knowledgemap.docs.id</code>.
     */
    public final TableField<DocsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>knowledgemap.docs.name</code>.
     */
    public final TableField<DocsRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>knowledgemap.docs.href</code>.
     */
    public final TableField<DocsRecord, String> HREF = createField("href", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<DocsRecord, Object> OBJECT_RELATION = createField("object_relation", org.jooq.impl.DefaultDataType.getDefaultDataType("\"knowledgemap\".\"docs_object_relation\""), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<DocsRecord, Object> KNOWLEDGE_RELATION = createField("knowledge_relation", org.jooq.impl.DefaultDataType.getDefaultDataType("\"knowledgemap\".\"docs_knowledge_relation\""), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<DocsRecord, Object> DOC_RELATION = createField("doc_relation", org.jooq.impl.DefaultDataType.getDefaultDataType("\"knowledgemap\".\"docs_doc_relation\""), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<DocsRecord, Object> PROPERTY = createField("property", org.jooq.impl.DefaultDataType.getDefaultDataType("\"knowledgemap\".\"docs_property\""), this, "");

    /**
     * Create a <code>knowledgemap.docs</code> table reference
     */
    public Docs() {
        this(DSL.name("docs"), null);
    }

    /**
     * Create an aliased <code>knowledgemap.docs</code> table reference
     */
    public Docs(String alias) {
        this(DSL.name(alias), DOCS);
    }

    /**
     * Create an aliased <code>knowledgemap.docs</code> table reference
     */
    public Docs(Name alias) {
        this(alias, DOCS);
    }

    private Docs(Name alias, Table<DocsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Docs(Name alias, Table<DocsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Docs(Table<O> child, ForeignKey<O, DocsRecord> key) {
        super(child, key, DOCS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Knowledgemap.KNOWLEDGEMAP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DOCS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DocsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DOCS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DocsRecord> getPrimaryKey() {
        return Keys.KEY_DOCS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DocsRecord>> getKeys() {
        return Arrays.<UniqueKey<DocsRecord>>asList(Keys.KEY_DOCS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Docs as(String alias) {
        return new Docs(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Docs as(Name alias) {
        return new Docs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Docs rename(String name) {
        return new Docs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Docs rename(Name name) {
        return new Docs(name, null);
    }
}
