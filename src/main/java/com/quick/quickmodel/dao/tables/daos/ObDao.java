/*
 * This file is generated by jOOQ.
 */
package com.quick.quickmodel.dao.tables.daos;


import com.quick.quickmodel.dao.tables.Ob;
import com.quick.quickmodel.dao.tables.records.ObRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class ObDao extends DAOImpl<ObRecord, com.quick.quickmodel.dao.tables.pojos.Ob, Integer> {

    /**
     * Create a new ObDao without any configuration
     */
    public ObDao() {
        super(Ob.OB, com.quick.quickmodel.dao.tables.pojos.Ob.class);
    }

    /**
     * Create a new ObDao with an attached configuration
     */
    @Autowired
    public ObDao(Configuration configuration) {
        super(Ob.OB, com.quick.quickmodel.dao.tables.pojos.Ob.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer getId(com.quick.quickmodel.dao.tables.pojos.Ob object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.quick.quickmodel.dao.tables.pojos.Ob> fetchById(Integer... values) {
        return fetch(Ob.OB.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.quick.quickmodel.dao.tables.pojos.Ob fetchOneById(Integer value) {
        return fetchOne(Ob.OB.ID, value);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.quick.quickmodel.dao.tables.pojos.Ob> fetchByName(String... values) {
        return fetch(Ob.OB.NAME, values);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public List<com.quick.quickmodel.dao.tables.pojos.Ob> fetchByProperty(Object... values) {
        return fetch(Ob.OB.PROPERTY, values);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public List<com.quick.quickmodel.dao.tables.pojos.Ob> fetchByKnowledgeRelation(Object... values) {
        return fetch(Ob.OB.KNOWLEDGE_RELATION, values);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public List<com.quick.quickmodel.dao.tables.pojos.Ob> fetchByObjectRelation(Object... values) {
        return fetch(Ob.OB.OBJECT_RELATION, values);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public List<com.quick.quickmodel.dao.tables.pojos.Ob> fetchByDocRelation(Object... values) {
        return fetch(Ob.OB.DOC_RELATION, values);
    }
}
